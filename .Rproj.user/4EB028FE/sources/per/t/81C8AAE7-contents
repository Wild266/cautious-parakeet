#Problems: 3.1, 3.5, 3.6, 3.8, 3.9, 3.14, 3.15, 3.16, 3.23, 3.24

#Modifications:  for 3.5, use p = 10 and p =50; 
#               for 3.14, let beta2 = .01 and sigma = 20; 
#               for 3.15 use the settings of 3.14 but take p = 5, 10, 20, 40; 
#               for 3.16 take sigma = 1, 20, 50 and p = 5, 10, 20, 40; 
#                for 3.24 take p = 5, 10, 20, 40.


path<-"/Users/szewingwong/Documents/George Mason University/Fall 2018/STAT 658 TIME SERIES"
setwd(path)
list.files(path)

library(reader)
#library(dplyr)

########### Exercise 3.1 #####################################

trend<-matrix(0, 100, 3)
for (p in 1:3){
set.seed(500)
wn<-rnorm(100)
simple.ma <- rep(1,2*p+1)/(2*p+1)
trend[,p]<- filter(wn,simple.ma,method="convolution")}

plot(ts(trend[,1]), col=1)
lines(ts(trend[,2]),col=2) #red
lines(ts(trend[,3]),col=3)#green

########### Exercise 3.5 #####################################

gassa <- read.table("GasSA.dat")
gassa<-ts(gassa, start=c(2013,2,13), frequency=52)
gassa.log <- ts(log(gassa),start=c(2013,2,13),frequency=52)


n <- length(gassa.log)
trend <- seq(1,n)

fit.lm <- lm(gassa.log ~ trend)
summary(fit.lm)
beta.ls <- fit.lm$coef
beta.ls
#(Intercept)       trend 
#9.365876950 0.005550979 
mu.ls <- ts((beta.ls[1] + beta.ls[2]*trend),start=c(2013,2,13),frequency=52)

p <- 10
simple.ma <- rep(1,2*p+1)/(2*p+1)
gas.trend <- filter(gassa.log,simple.ma,method="convolution")
gas.trend1 <- ts(gas.trend,start=c(2013,2,13),frequency=52)

p <- 50
simple.ma <- rep(1,2*p+1)/(2*p+1)
gas.trend <- filter(gassa.log,simple.ma,method="convolution")
gas.trend2 <- ts(gas.trend,start=c(2013,2,13),frequency=52)

par(mar=c(4,4,2,2)+0.1,cex.lab=.8)
plot(gassa.log,xlab="Year",ylab="Log of Gas",col=gray(.8),lwd=2)
lines(mu.ls,lty=3,lwd=1)   #dot
lines(gas.trend1, col=2)    #red
lines(gas.trend2, col=3)#green
#dev.off()

########### Exercise 3.14 #####################################

n <- 240
time <- seq(1,n)
beta0 <- 0
beta1 <- .5
beta2 <- 0.01
sigma <- 20
trend <- beta0 + beta1*time + beta2*time^2
set.seed(189)
y <- sigma*rnorm(n)
x <- trend + y

p <- 1
simple.ma <- rep(1,2*p+1)/(2*p+1)
mu.trend <- filter(x,simple.ma,method="convolution")

bias=mu.trend-x
mean(bias[2:239])
#0.0403174

########### Exercise 3.15 #####################################

n <- 240
time <- seq(1,n)
beta0 <- 0
beta1 <- .5
beta2 <- 0.01
sigma <- 20
trend <- beta0 + beta1*time + beta2*time^2
set.seed(189)
y <- sigma*rnorm(n)
x <- trend + y

p <- 5
simple.ma <- rep(1,2*p+1)/(2*p+1)
mu.trend1 <- filter(x,simple.ma,method="convolution")

p <- 10
simple.ma <- rep(1,2*p+1)/(2*p+1)
mu.trend2 <- filter(x,simple.ma,method="convolution")

p <- 20
simple.ma <- rep(1,2*p+1)/(2*p+1)
mu.trend3 <- filter(x,simple.ma,method="convolution")

p <- 40
simple.ma <- rep(1,2*p+1)/(2*p+1)
mu.trend4 <- filter(x,simple.ma,method="convolution")

plot(x, type="l")
lines(mu.trend1, col=2) #red
lines(mu.trend2, col=3) #green
lines(mu.trend3, col=4) #purple 
lines(mu.trend4, col=5) #blue

########### Exercise 3.16 #####################################


moving.avg<-function(sigmavalue, pvalue) {
  n <- 240
  time <- seq(1,n)
  beta0 <- 0
  beta1 <- .5
  beta2 <- 0.01
  sigma <- sigmavalue
  trend <- beta0 + beta1*time + beta2*time^2
  set.seed(189)
  y <- sigma*rnorm(n)
  x <- trend + y
  
  p <- pvalue
  simple.ma <- rep(1,2*p+1)/(2*p+1)
  
  return(filter(x,simple.ma,method="convolution"))
  return(x)
}


mu.trend1=moving.avg(1, 5)
mu.trend2=moving.avg(1, 10)
mu.trend3=moving.avg(1, 20)
mu.trend4=moving.avg(1, 40)


mu.trend20_1=moving.avg(20, 5)
mu.trend20_2=moving.avg(20, 10)
mu.trend20_3=moving.avg(20, 20)
mu.trend20_4=moving.avg(20, 40)


mu.trend50_1=moving.avg(50, 5)
mu.trend50_2=moving.avg(50, 10)
mu.trend50_3=moving.avg(50, 20)
mu.trend50_4=moving.avg(50, 40)

par(mar=c(4,4,2,2)+0.1,mfrow=c(2,1))

plot(mu.trend1, col=2, type="l", main="P=5 for 3 different sigma") #red
lines(mu.trend20_1, col=3) #green
lines(mu.trend50_1, col=4) #blue 

plot(mu.trend2, col=2, type="l", main="P=10 for 3 different sigma") #red
lines(mu.trend20_2, col=3) #green
lines(mu.trend50_2, col=4) #blue 

plot(mu.trend3, col=2, type="l", main="P=20 for 3 different sigma") #red
lines(mu.trend20_3, col=3) #green
lines(mu.trend50_3, col=4) #blue

plot(mu.trend4, col=2, type="l", main="P=40 for 3 different sigma") #red
lines(mu.trend20_4, col=3) #green
lines(mu.trend50_4, col=4) #blue 
mfrow
########### Exercise 3.23 #####################################
set.seed(358)
z <- rnorm(240,mean=0,sd=1)
x <- rep(0,240)
phi <- 1
x <- rnorm(1)

n=240
sigma=sqrt(10)
set.seed(121)
wn <- sigma*rnorm(n)
for(t in 2:240) { x <- c(x,phi*x[t-1] + z[t]) }

rw=x+wn
p <- 1
simple.ma <- rep(1,2*p+1)/(2*p+1)
mu.trend1 <- filter(rw,simple.ma,method="convolution")

mu.trend1

plot(ts(rw))
lines(mu.trend1[2:239], col=2)

########### Exercise 3.24 #####################################


set.seed(358)
z <- rnorm(240,mean=0,sd=1)
x <- rep(0,240)
phi <- 1
x <- rnorm(1)

n=240
sigma=sqrt(10)
set.seed(121)
wn <- sigma*rnorm(n)
for(t in 2:240) { x <- c(x,phi*x[t-1] + z[t]) }

rw=x+wn

random.walk<-function(pvalue){
p <- pvalue
simple.ma <- rep(1,2*p+1)/(2*p+1)
return( filter(rw,simple.ma,method="convolution")) }

p1=random.walk(5)
p2=random.walk(10)
p3=random.walk(20)
p4=random.walk(40)


plot(ts(rw), main="random walk with white noise with different p values in filter")
lines(p1, col=2) #red
lines(p2, col=3) #green
lines(p3, col=4) #blue
lines(p4, col=5) #neon blue





